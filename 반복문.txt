반복 처리는 같은 처리 과정을 여러 번 되풀이하는 것이다. 반복 처리는 왜 필요한가? 학생의 국어, 영어, 수학 성적의 평균을 구하는 작업을 생각하여 보자.
학생 수가 30명이라면 각 학생의 국어, 영어, 수학 성적을 합하여 3으로 나누는 처리 과정을 30번 반복해야 할 것이다.
만약 학생수가 1000명이라면 1000번 반복해야 한다. 이러한 반복적인 작업을 사람이 하는 것은 아주 비효율적이다. 여기에 컴퓨터의 강점이 있다.
컴퓨터는 인간이 수행할 경우 막대한 시간이 소요되는 반복 작업을 빠르고 정확하게 처리할 수 있다. 이와 같이 어떤 대상에 대하여 같은 처리 과정을
반복하는 것은 프로그래밍에 있어서 자주 발생한다.

자 이제 실제적인 예를 들어 설명해 보자. "Hello World!"를 화면에 5번 출력하는 코드를 작성하여 보자.
반복문을 사용하지 않는다면 다음과 같이 하나 하나 문장을 작성하여 출력해야 한다.

	document.write("Hello World! <br>");
	document.write("Hello World! <br>");
	document.write("Hello World! <br>");
	document.write("Hello World! <br>");
	document.write("Hello World! <br>");

하지만 우리가 반복문을 사용한다면 다음과 같이 간략하게 작성할 수 있다. 아래 문장에서는 document.write() 문장을 5번 반복 실행한다.
자세한 형식은 차후에 학습하자.

	for (var i = 0; i < 5; i++)
	{
		document.write("Hello World! <br>");
	}

기본적인 반복문의 종류는 다음과 같다.

	- while : 지정된 조건이 참이면 반복 실행한다.
	- for : 정해진 횟수 동안 코드를 반복 실행한다.

		//	while 루프

while 문은 주어진 조건이 만족되는 동안, 문장을 반복 실행하는 제어 구조이다. while 문의 형식은 다음과 같다.

	형식		while( 조건식 )
				문장;

	설명		조건식이 참이면 문장을 반복 실행한다.

	var i = 0;

	while( i < 10 )
	{
		document.write("Hello World! <br>");
		i++;
	}

여기서 조건문에 주의하자. 변수 i 의 값은 0 -> 1 -> ... -> 9까지 증가하면서 반복되고 i가 10으로 증가되면 조건식이 거짓이 되어 반복이 종료된다.

일단 가장 기본적인 예제로 변수 i의 값을 0부터 9까지 하나씩 증가시키면서 브라우저의 화면에 출력하는 예제를 살펴보자.
js_while.html

		//	for 루프

for 문은 문장을 정해진 횟수만큼 반복하여 실행하는 반복 구조이다. for 루프(loop)라고도 한다.
for 문은 초기식(initialization), 조건식(expression), 증감식(increment)의 3부분으로 구성된다. 이들 3부분은 세미콜론으로 분리되어 있다.

	형식		for( 초기식; 조건식; 증감식 )
				반복문장;

	설명		초기식을 실행한 후에 조건식의 값이 참인 동안, 반복문장을 반복한다.
			한 번 반복이 끝날 때마다 증감식이 실행된다.

	for ( i = 0; i < 10; i++ )				|	for ( 초기식; 조건식; 증감식 )
	{										|	{	
		document.write(i + "<br />");		|		반복하고자 하는 문장들
	}										|	}

초기식은 반복 루프를 시작하기 전에 한 번만 실행된다 주로 변수 값을 초기화하는 용도로 사용된다.
위의 예에서는 변수 i의 값을 0으로 설정하였다. i는 루프 제어에 사용되는 변수가 된다.
조건식은 반복을 계속할 것인지 중단할 것인지를 결정하는 수식이다. 따라서 수식의 값이 참이나 거짓으로 계산될 수 있는 관계식이나 논리식이어야 한다.
한 번의 루프 실행이 끝나면 증감식이 실행된다. 루프를 제어하는 변수를 증가시킬 수도 있고 감소시킬 수도 있다.
위의 예제에서는 i++;가 여기에 해당하고 변수 i의 값을 1 증가시키는 역할을 한다.

초기식에서는 다음과 같이 여러 개의 문장이 콤마로 연결될 수 있다.

	for( var i = 0; len = fruits.length; i < len; i++) {
		└──────────────────────────────┘
		// 콤마 연산자로 순차적으로 문장 실행
		document.write(fruits[i] + "<br>");
	}

생략도 가능하다.

	var i = 2, len = fruits.length;
	for (; i < len; i++) {
		document.write(fruits[i] + "<br>");
	}

앞에서 나왔던 예제인 변수 i의 값을 0부터 9까지 하나씩 증가시키면서 브라우저의 화면에 출력하는 예제를 for 문을 사용해 다시 작성해 보면 다음과 같다.
js_for.html

반복문을 사용해 <h1> 요소부터 <h6> 요소까지를 화면에 출력해 보자.
js_for1.html

반복문의 또 다른 예제로 섭씨 온도를 화씨 온도로 변환하는 예제를 작성하여 보자.
js_for_temp.html

		//	중첩 반복문

하나의 for 루프 안에 다른 for 루프가 내장될 수 있다. 다음 예제는 중첩된 for 루프를 이용하여 구구단표를 화면에 표시하였다.
루프가 중첩될 때는 루프 제어 변수로 서로 다른 변수를 사용해야 한다.
js_nested_loop

		//	do/while 루프

do/while 문은 while 문과 비슷하나 반복 조건을 루프의 처음이 아니라 루프의 끝에서 검사한다는 점이 다르다.
do/while 문은 일단 문장을 한 번 실행하고 나서 조건을 검사하고 싶을 때 사용한다. do/while 문의 구조는 다음과 같다.
js_do_while.html

		//	for/in 루프

for/in 루프는 객체 안의 속성들에 대하여 어떤 처리를 반복을할 수 있는 구조이다. 객체는 앞에서 아주 간단히 다룬 적이 있다.
객체는 속성과 함수를 모아놓은 엔터티라고 이해하자. for/in 루프를 이용하면 객체 안의 모든 속성에 대하여 어떤 연산을 실행할 수 있다.

	for ( 변수	in	객체)	// 변수에 객체의 속성이 하나씩 대입되면서 반복
	{
		문장;
	}

예를 들어 아래 코드에서는 myCar라는 이름의 객체를 정의하고 객체의 속성을 변수 txt에 누적한 후에 화면에 출력한다.
js_for_in.html

		//	break 문장

break 문은 반복 루프를 벗어나기 위해 사용한다. 반복 루프 안에서 break 문이 실행되면 반복 루프를 빠져 나오게 된다.
js_break.html

		//	continue 문장

continue 문은 현재 실행하고 있는 반복 과정의 나머지를 생략하고 다음 반복을 시작하게 만든다.
예를 들어 0부터 10까지의 정수 중에서 3만 제외하고 출력하는 예제를 가지고 설명하여보자.
0부터 10까지의 정수를 하나씩 조사하다가 현재 정수가 3이면 continue를 실행해서 현재 반복을 중지하고 다음 반복을 시작한다.