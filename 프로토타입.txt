지금까지 우리는 개별적인 객체만을 생성해 왔다. 각 객체는 다른 객체와 완전히 별도로 취급되었다.
따라서 하나의 객체가 가지고 있는 속성과 메서드는 다른 객체가 전혀 이용할 수 없었다. 물론 이러한 방법도 유용하지만 속성이나 메서드를 
여러 객체가 공유하는 것이 어떤 경우에는 필요하다.

어떤 경우에 필요한가? 자바스크립트로 게임을 제작한다고 가정하자. 점을 나타내는 객체가 필요하게 되어서 다음과 같이 생성 함수를 정의하였다.

	function Point(xpos, ypos) {
		this.x = xpos;
		this.y = yposl;
		this.getDistance = function() {
			return Math.sqrt(this.x * this.x + this.y * this.y);
		}
	}

여기서 getDistance()는 원점으로부터의 거리를 계산하는 함수이다. 그런데 여러 개의 점이 필요하다고 가정하자. 위의 생성자를 사용하여
필요한 만큼의 객체를 생성하는 코드는 다음과 같다.

	var p1 = new Point(10, 20);
	var p2 = new Point(10, 30);

물론 이렇게 해도 실행에는 전혀 문제가 없다. getDistance() 메서드가 객체 안에서 정의되어 있다. 따라서 생성되는 모든 Point 객체는 내부에
이 메서드를 갖게 된다. 만약 객체가 100개가 생성된다면 getDistance() 메서드도 100개가 생성되는 것이다. 명백하게 이것은 메모리를 낭비하면서
비효율적이다. getDistance() 메서드는 객체당 하나씩 가지고 있을 필요가 없다. 점 사이의 거리를 계산하는 알고리즘은 변하지 않는다.
따라서 하나의 getDistance() 메서드를 모든 객체가 공유하면 되는 것이다. 객체 안의 메서드가 1개가 아니라 10개가 있다고 가정하여 보자.
메모리의 낭비는 더 심각해진다.

결론적으로 객체는 자신만의 데이터를 가져야 하지만 메서드는 가급적 서로 공유하는 편이 좋다. 객체들 사이에서 메서드를 공유하는 그런 방법은 없는 것일까?
다른 객체 지향 언어에서는 클래스(class)라는 개념이 제공된다. 클래스는 객체에 대한 설계도(템플릿)이다. 객체는 클래스로 찍어낼 수 있다.
객체가 자동차라면 클래스는 자동차의 설계이다. 클래스로부터 객체를 찍어내면 객체는 자기만의 데이터를 갖게 되지만 메서드는 클래스에 정의된 메서드를
서로 공유하게 된다. 자바스크립트에는 클래스의 개념이 없다. 하지만 프로토타입(prototype)이라는 개념을 제공한다.
이 프로토타입을 통하여 여러 객체가 공유하는 메서드를 정의할 수 있다.

		//	프로토타입

자 그렇다면 클래스가 메서드를 소유하게 하려면 어떻게 해야 하는가? 자바스크립트의 모든 객체는 prototype이라는 숨겨진 객체를 가지고 있으며
이 객체를 이용해 공유되는 메서드를 작성할 수 있다. 앞의 Point 객체에 대해서 프로토타입을 이용해 공유되는 메서드를 정의하여 보면 다음과 같다.

	function Point(xpos, ypos) {
		this.x = xpos;
		this.y = ypos;
	}

	Point.prototype.getDistance = function () {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	};

Point.prototype이라는 숨겨진 객체가 있으며 여기에 getDistance()를 정의해 두면 Point 객체는 모두 getDistance() 메서드를 공유할 수 있다는 것이다.

위의 getDistance() 메서드는 특정한 객체 안에 정의되는 것이 아니라 prototype 객체 안에 정의된다.
따라서 객체를 아무리 많이 생성하더라도 getDistance() 메서드는 오직 하나만 존재한다.

getDistance() 메서드를 프로토타입 안에 정의하였지만 객체를 통하여 메서드를 호출하는 방법은 동일하다.

	var p1 = new Point(10, 20);
	p1.getDistance();

또 하나의 인스턴스가 생성되어서 getDistance()가 호출된다고 해도 동일한 메서드가 사용된다.

	var p2 = new Point(10, 20);
	p2.getDistance();

위의 내용을 예제를 통하여 살펴보자.		9_03_obj_point.html

		[참고]

여기서는 메서드만 공유하였지만 속성도 같은 방법으로 공유할 수 있다.

	Point.prototype.shared = 10;

객체가 소유하는 속성을 인스턴스 속성이라고 한다. 마찬가지로 객체가 소유하는 메서드를 인스턴스 메서드라고 한다.
반면에 객체들 사이에서 공유되는 속성과 메서드를 각각 클래스 속성과 클래스 메서드라고 한다.

		//	프로토타입 체인

자바스크립트에서 속성이나 메서드를 참조하게 되면 다음과 같은 순서대로 찾는다.

1 객체 안에서 속성이나 메서드가 정의되어 있는지 체크한다.
2 객체 안에 정의되어 있지 않으면 객체의 prototype이 속성이나 메서드를 가지고 있는지 체크한다.
3 원하는 속성/메서드를 찾을 때까지 프로토타입 체인(chain)을 따라서 올라간다.

이것을 프로토타입 체인(prototype chain)이라고 한다. 프로토타입 객체는 개별 객체에서 시작해서 생성자의 프로토타입을 통하여 
Object의 프로토타입까지 연결되어 있다. 이것을 이전의 예제인 Point 객체를 이용하여 설명해 보자.

예제에서 처럼 getDistance() 메서드를 Point.prototype 안에 정의하였다고 가정하자. p1.getDistance()와 같이 getDistance() 메서드를 호출하면
먼저 p1 객체 안에 정의되어 있는지를 찾는다. 없으면 프로토타입 체인을 타고 Point.prototype으로 올라간다. 
Point.prototype 안에 getDistance()를 찾아서 호출하게 된다.

또 하나의 예로 p1.toString()과 같이 호출한다고 가정하자. 이 경우에는 p1 객체 안에도 없고 Point.prototype 객체 안에도 없다.
이 경우에는 결국 Object 객체까지 거슬러 올라간다. Object 안에 정의되어 있는 toString() 메서드가 호출된다. 만약 Object 객체 안에도
정의되어 있지 않은 메서드라면 당연히 오류가 발생한다.

프로토타입 체인은 _prototype_ 속성을 이용해 연결된다. 브라우저에 따라서 속성 이름이 다를수 있다. 만약 다른 객체 지향 언어를 학습하였다면 지금
설명한 것이 상속의 개념과 유사하다는 것을 알 수 있다. 자바스크립트에서 프로토타입을 이용해 상속을 어느 정도 구현할 수 있다.

		//	Object 객체

Object 객체는 자바스크립트 객체의 부모가 되는 객체이다. 자바스크립트의 모든 객체는 Object 객체를 기초로하여 생성된다.
따라서 객체는 내부에 Object 객체의 속성과 메서드를 가지고 있다고 생각해도 좋다. Obejct 객체는 어떤 속성과 메서드를 가지고 있을까?
다음 표에 정리하였다.

	속성/메서드			설명

						속성으로 생성자 함수를 가리킨다.
	constructor			var d = new Date();
						d.constructor는 Date()와 같다.

	valueOf()			메서드로서 객체를 숫자로 변환한다.
	toString()			메서드로서 객체의 값을 문자열로 변환한다.
	hasOwnProperty()	전달 인수로 주어진 속성을 가지고 있으면 true 반환
	isPrototypeOf()		현재 객체가 전달 인수로 주어진 객체의 프로토타입이면 true 반환

Object 객체의 메서드는 하위 객체에서 재정의해서 사용할 수 있다. 예를 들어 Object 객체의 메서드인 toString()을 하위 객체에서 오버라이딩(재정의)해서
다시 정의할 수 있다.

	myCar.toString = function () {
		return "새로 생성된 객체입니다."
	}
	document.write(myCar.toString());