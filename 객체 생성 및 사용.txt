		//	객체의 종류

자바스크립트에서 사용되는 객체를 크게 2가지로 나누면 내장 객체(built-in object)와 사용자 정의 객체(custom object)로 나눌 수 있다.

	- 내장 객체(bulit-in object) : 생성자가 미리 작성되어 있다.
	- 사용자 정의 객체(custom object) : 사용자가 생성자를 정의한다.

자바스크립트에 내장된 객체는 생성자를 정의하지 않고도 사용이 가능하다. Date, String, Array와 같은 객체가 내장 객체이다.
또 HTML 문서를 나타내는 객체인 document도 내장 객체라고 생각할 수 있다. 앞장에서 우리는 document 객체를 사용해 동적으로
자바스크립트에서 HTML 문서에 요소를 추가한 바 있다.

	document.write("<p> 이것은 단락입니다. </p>");
document도 내장 객체이다.

		//	객체 생성 방법

자바스크립트는 문법 측면에서 볼 때 상당히 유연성 있는 객체 지향 언어이다. 객체를 생성하는 방법도 여러 가지가 있다.
개발자마다 선호하는 방법이 있지만 다른 사람의 코드를 읽기 위해서는 다른 방법들도 알아둘 필요가 있다.
자바스크립트에서 새로운 객체를 생성하는 데는 크게 나누어서 2가지의 방법이 있다.

	- 객체를 객체 상수로부터 직접 생성한다.
	- 생성자 함수를 이용하여 객체를 정의하고 new를 통하여 객체의 인스턴스를 생성한다.

자바스크립트에서는 클래스(class)가 없다. 다른 객체 지향 언어에서는 먼저 클래스를 정의하고 클래스를 설계도 삼아서 객체를 찍어낸다.
하지만 자바스크립트는 원천적으로 클래스라는 개념이 없으면 모든 것은 객체이고 생성자 함수가 클래스의 역할을 흉내낸다.

		//	객체 상수로부터 객체 생성

이전에도 등장하였지만 객체 상수(object literal)를 사용하여 myCar 객체를 생성해 보면 다음과 같다.

	var myCar = {
		model : "520d",		// 객체의 속성
		speed : 60,
		color : "red",
		brake : function() { this.speed -= 10; },	// 객체의 메서드
		accel : function() { this.speed += 10; }
	};

위의 문장이 실행되면 바로 객체가 생성되고 객체의 이름이 myCar가 된다. 이후부터는 다음과 같이 바로 사용하면 된다.

	myCar.color = "yellow";
	myCar.brake();

이 방법은 간단하기는 하지만 객체를 하나만 생성할 수 있다. 추가로 객체를 생성하려면 동일한 코드를 반복해야 한다.
따라서 이런 식으로 정의된 객체를 싱글톤(singleton)이라고 부른다. 싱글톤이란 객체가 하나만 생성된다는 것을 의미한다.

		//	생성자 함수를 이용한 객체 생성

개발자는 자신만의 객체도 생성할 수 있다. 이것을 사용자 정의 객체라고 한다. 사용자 정의 객체를 생성하려면 생성자(constructor)라는
특별한 함수가 필요하다. 생성자는 객체를 초기화하는 역할을 한다. 객체를 생성하는 연산자는 new 이다.

	function Car(model, speed, color) {
		this.model = model;
		this.speed = speed;
		this.color = color;
		this.brake = function () {
			this.speed -= 10;
		}
		this.accel = function () {
			this.speed += 10;
		}
	}

this는 코드를 실행하는 현재 객체를 의미한다. 생성자는 전달된 매개 변수값으로 현재 객체의 속성을 설정한다.
this가 없다면 속성을 지역 변수로 혼동할 수 있기 때문에 객체의 속성에는 반드시 this를 붙인다.
앞에 this가 붙는 변수는 속성이고 앞에 this가 붙는 함수는 메서드이다.

생성자를 정의하였다면 객체는 다음과 같이 생성할 수 있다.

	var myCar = new Car("520d", 60, "white");
	myCar.color = "yellow";
	myCar.brake();

객체를 생성하려면 먼저 new 연산자를 쓰고 다시 그 뒤에 생성자를 호출하는 문장을 작성하면 된다. new 연산자가 객체를 생성하고 생성자가 객체를 초기화 한다.
new 연산자를 생략하고 생성자만을 호출하면 객체가 만들어지지 않는다. 항상 new 연산자를 사용해야 한다.

이 방법의 장점은 개발자가 원하는 개수만큼 객체를 쉽게 만들 수 있다는 점이다. 개발자가 개발 도중에, 필요하지만 자바스크립트에서 지원하지 않는 객체를 생성하고
싶을 때 사용하게 된다. 내장 객체는 미리 생성자 함수가 작성되어 있다. 따라서 내장 객체의 경우에는 생성자를 작성할 필요 없이 
new 하여서 객체를 생성하고 사용하면 된다.

		//	객체 멤버 사용하기

객체 안의 속성과 메서드를 객체 멤버라고 한다. 객체 멤버를 사용하기 위해서는 점(dot) 연산자를 사용한다. 먼저 어떤 객체에 속해 있는지를 말하고
나중에 멤버 이름을 말하는 것이다. 이것은 우리가 자신을 소개할 때, 먼저 소속 회사를 말하고 이름을 말하는 것과 유사하다.
즉 "저는 자바전자의 홍길동입니다."와 같이 소개하는 것이다.

구체적으로 myCar라는 이름의 객체 안에 color 속성을 "red"로 변경하는 문자은 다음과 같다.

	myCar.color = "red";

객체의 메서드도 동일한 형식으로 호출할 수 있다.

	myCar.brake();

		Q&N	자바에는 클래스라는 개념이 있는데 자바스크립트에는 없는 이유

왜냐하면 입력되는 즉시 실행해야 하는 인터프리터 언어에서 클래스를 정의하고 사용하는 것이 쉽지는 않기 때문이다.
클래스는 없지만 클래스의 역할을 하는 프로토타입이 있다. 이것을 클래스처럼 사용할 수 있다.

		Q&N	객체를 생성하려면 항상 생성자를 먼저 작성해야 하는지?

그렇지 않다. 자바스크립트에서는 객체 상수를 가지고 직접 객체를 생성할 수도 있다. 이런 경우 생성자 없이도 객체 생성이 가능하다.
다만 이런 경우에는 객체를 여러 개 만들려면 상당히 번거롭다. 생성자를 만드는 것이 객체 지향의 개념에 더 부합된다.

		[참고]	메서드 표기

객체 지향 언어에서는 메서드의 이름을 표기할 때 낙타체(camel-case) 방시을 사용한다. 낙타체 방식이란 첫 글자를 소문자로 적고, 그 뒤에 붙는 단어부터는
첫 글자를 대문자로 적는 것을 말한다. 즉 get_value() 대신에 getValue()로 표기하는 것이다.

자동차를 객체로 모델링하고 생성자를 정의한 후에, 객체를 생성하고 객체의 멤버에 접근하여 사용하는 예제를 작성하여 보자.
9_02_object_car.html

		//	기존의 객체에 속성과 메서드 추가하기

자바스크립트에서는 기존에 존재하고 있던 객체에도 속성을 추가할 수 있는데, 생성자를 변경할 필요 없이 단순히 값을 대입하는 문장을 적어주면 된다.
예를 들어 앞에서 정의한 myCar 객체가 이미 존재하고 있었다고 가정하자.
새로운 속성 turbo와 새로운 메서드 showModel()을 myCar 객체에 추가하려면 다음과 같이 하면 된다.

	// 기존의 myCar 객체가 있다고 가정하자.
	myCar.turbo = true;
	myCar.showModel = function(){
		alert("모델은" + this.model + "입니다");
	}

생성자 함수는 전혀 변경할 필요가 없다.