지금부터는 자바스크립트가 내장하고 있는 많은 객체에 대해서 살펴보자. 많은 경우에 자바스크립트 내장 객체만 사용해도 프로그램을 개발하기에 충분하다.
개발자가 내장 객체를 능숙하게 사용할 수 있다면 작업이 훨씬 쉬워질 것이다.

		//	Date 객체

Date 객체는 날짜와 시간 작업을 하는데 사용되는 가장 기본적인 객체이다. 자바스크립트의 모든 내장 객체 중에서도 Date 객체는 상당히 많이 사용된다.
웹 프로그래밍에서는 날짜를 사용하는 작업이 많다. 이런 작업을 위해 Date 객체는 완전히 파악해야 한다.
여기서는 날짜를 저장하고 달력과 타이머를 만드는 방법까지 살펴보자.

새로운 Date 객체는 다음과 같이 생성한다.

	var today = new Date();		// 현재 날짜를 가진 객체를 생성

위의 문장은 현재 시간을 가지고 있는 Date 객체를 생성한다. 현재 시간은 HMT나 UTC 기준으로 표시된다.
GMT와 UMT는 거의 비슷한 시간을 표시하므로 사용자는 구별하지 않아도 된다.

		-	Date 객체 생성자

Date 객체의 생성자는 아주 다양하게 지원된다. Date 객체를 생성하는 기본적인 4가지의 방법이 있다. Date 객체를 생성할 때, 문자열을 인수로 줄 수 있고
정수를 줄 수 있다.

	new Date()				// 현재 날짜와 시간
	new Date(milliseconds)	// 1970/01/01 이후의 문자열
	new Date(dateString)	// 다양한 문자열
	new Date(year, month, date[, hours[, minutes[, seconds[, ms]]]]])

자바스크립트의 Date 객체는 매우 강력한 날짜 파서를 가지고 있어서 문자열로 날짜를 지정하는 많은 방법을 지원한다.
가장 기본적인 방법은 연, 월, 일, 시, 분, 초, 밀리초의 순서대로 정수를 입력하는 방법이다. 여기서 주의할 점은 월은 0부터 시작한다는 점이다. 
1월이면 0을 입력한다.

	var d1 = new Date(2013, 7, 24);		// 2013년 8월 24일
	var d2 = new Date(2013, 7, 24, 18, 30, 0);
	var d3 = new Date(2013, 7, 24, 18, 30, 0, 0);

또 1970년 이후로 경과된 밀리초를 입력해서 시간을 설정할 수도 있다. 이것은 유닉스 운영체제에서 처음으로 사용한 방법이다.

	var d3 = new Date(100000000);	// 율리우스 숫자로 날짜를 지정

특정한 날짜로 Date 객체를 생성하는 간단한 예제를 작성하여 보면 다음과 같다.

		-	Date의 메서드

Date 객체는 아주 많은 메서드를 가진다. Date 객체에서 연, 월, 일, 시, 분, 초를 각각 설정하고 추출할 수 있는 메서드를 제공한다.

	-	getDate()	(1-31 반환)							-	setDate()
	-	getDay()	(0-6 반환)							-	setDay()
	-	getFullYear()	(4개의 숫자로 된 연도 반환)		-	setFullYear()
	-	getHours()		(0-23 반환)						-	setHours()
	-	getMilliseconds()	(0-999)						-	setMilliseconds()
	-	getMinutes()	(0-59)							-	setMinutes()
	-	getMonth()	(0-11)								-	setMonth()
	-	getSeconds()	(0-59)							-	setSeconds()

객체 지향에서 getXXX() 타입의 메서드는 접근자로서 객체의 속성을 추출하는 데 사용된다.
setXXX() 타입의 메서드는 설정자로서 객체의 속성을 설정하는 데 사용된다. 여기서도 월이 0부터 시작하는 것에 유의하자.

toXXXString() 형태의 메서드는 날짜를 특정 문자열 형태로 변환하는데 사용된다. 간단한 실행 결과를 보자.	obj_date1.html