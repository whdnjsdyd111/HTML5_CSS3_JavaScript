의미적 요소(Semantic elements)는 브라우저에게 요소의 의미나 목적을 명확하게 알려주는 요소이다.
앞에서 학습한 div 태그는 HTML 문서 중에서 논리적인 섹션을 나타내지만 div 태그는 그 자체로는 아무런 의미가 없다.
단순한 컨테이너의 역할만 하는 것이다. 물론 개발자는 id나 class 이름을 div 와 함께 사용해서 의미를 전달할 수 있지만
브라우저는 이것을 인식하지 못한다

	<div id="header">

HTML5에서는 이러한 문제점을 해결하기 위해 시맨틱 요소를 정의하였다.
시맨틱 요소는 브라우저와 개발자에게 명확하게 그 의미를 설명하는 요소이다.

	<header>

하나의 예로 다음 그림에서 왼쪽은 div만을 이용해 웹 페이지를 구성하였고 오른쪽은 HTML5의 시맨틱 요소를 이용해 구성한 것이다.
기존 웹 사이트에서는 내비게이션 섹션과 머리글 및 바닥글을 나타내기 위해 <div id="nav">, <div id="header">, <div id="footer">를 사용해 왔다.
	
	┌───────────────────────────────────────────────────┐		┌───────────────────────────────────────────────────┐
	│				div id="header"						│		│					<header>						│
	└───────────────────────────────────────────────────┘		└───────────────────────────────────────────────────┘
	┌───────┐┌──────────────────────────────────────────┐		┌───────┐┌──────────────────────────────────────────┐
	│ div	││	div id="content"						│		│<nav>	││	<section id="content">					│
	│id =	││											│		│		││											│
	│"nav:	││											│		│		││											│
	│		││											│		│		││											│
	│		││											│		│		││											│
	│		││											│		│		││											│
	└───────┘└──────────────────────────────────────────┘		└───────┘└──────────────────────────────────────────┘
	┌───────────────────────────────────────────────────┐		┌───────────────────────────────────────────────────┐
	│				div id="footer"						│		│					<footer>						│
	└───────────────────────────────────────────────────┘		└───────────────────────────────────────────────────┘

		- 시맨틱 요소

W3C는 많은 수의 웹 페이지를 분석해서 개발자가 많이 사용하고 있는 아이디와 클래스 이름을 추출해 이것을 표준 태그로 만들었다.
시맨틱 태그 중의 일부는 다음표와 같다. 밑의 태그들은 이름만 가지고도 어떤 역할을 하는지 추측할 수 있다.
<header>와 <footer>는 문서의 머리말과 꼬리말이고 <nav>는 내비게이션 링크나 메뉴바 등을 생성하는 데 사용된다.
<section>과 <article>은 문서의 내용을 그룹핑하는 데 사용된다.

	태그				설명

	<header>		문서의 머리말(header)
	<hgroup>		<h1>에서 <h6> 요소의 그룹
	<nav>			내비게이션 링크
	<article>		문서의 내용이나 블로그의 포스트
	<section>		문서의 섹션
	<aside>			사이드 바와 같이 옆에 위치하는 내용
	<footer>		문서의 꼬리말(footer)
	<figure>		그림이나 도표
	<time>			날짜와 시간을 표시

예를 들면 연관된 링크로 이루어진 사이드 바를 나타낼 수 있다.

		┌───────────────────────────────────────┐
		│				<header>				│
		└───────────────────────────────────────┘
		┌───────────────────────────────────────┐
		│				<nav>					│
		└───────────────────────────────────────┘
		┌───────┐┌──────────────────────────────┐
		│<aside>││	<section>					│
		│		│├──────────────────────────────┤
		│		││	<article>					│
		│		│├──────────────────────────────┤
		│		││	<section>					│
		│		│├──────────────────────────────┤
		│		││	<article>					│
		└───────┘└──────────────────────────────┘
		┌───────────────────────────────────────┐
		│				<footer>				│
		└───────────────────────────────────────┘

그렇다면 앞절에서 작성한 레이아웃을 시맨틱 요소로 교체하고 약간의 내용을 넣어서 블로그 페이지를 다시 작성하여 보자.

<aside>와 <section>을 배치할 때, 앞절처럼 float:left와 float:right를 사용해도 된다. 하지만 컬럼의 높이가 다를 경우에 약간 어색하게 된다.
물론 배경색만 없으면 상관이 없긴 하다.

이 점을 해결하기 위해 여기서는 display 속성에 table-cell을 지정하였다. 이 값이 컨테이너에 지정되면
자식 요소를 테이블의 셀처럼 배치하라는 의미가 된다.

요소에 display:table과 display:table-cell 속성을 지정하면 화면에 가상 테이블을 작성할 수 있다.
즉 테이블을 사용해 레이아웃을 작성하는 것이다. 이 방법의 장점은 다음과 같다.

	- 테이블 형태로 레이아웃하는 데 float나 절대 위치 설정이 필요하지 않다.
	- 컬럼의 높이가 달라도 문제가 발생하지 않는다.
	- IE8+ 버전과 Firefox, Chrome, Safari, Opera가 모두 지원한다.
	- CSS 코딩이 간결해진다.

하지만 단점도 존재하는데 가장 큰 단점은 소스에 적힌 순서대로 테이블의 셀이 생성된다는 점이다.

		[참고]	인터넷 익스플로러 8과 이전 문제

IE 8과 이전 버전은 인식 못하는 요소를 렌더링하는 방법을 모른다. 따라서 
<header>, <section>, <footer>, <aside>, <nav>, <article>, <figure>에 대하여 CSS를 적용시킬 수 없다.
고맙게도, Sjoerd Visscher는 HTML5 shiv라고 불리는 자바스크립트 해결 방법을 발견하였다. 이것을 사용하면 버전 9 이전 버전의
Internet Explorer에서 HTML5 요소를 스타일할 수 있다.

	https://code.google.com/p/html5shiv/

에서 HTML shiv를 다운로드하고 더 많은 정보를 찾을 수 있다.
HTML5 Shiv를 활성화하려면 <head> 요소에 다음 코드를 삽입한다.

	<!--[if It IE 9]>
		<script src="html5shiv.js"></script>
	<![endif]-->

위의 코드는 IE만 읽을 수 있는 주석이다. 이것은 <head> 요소에 배치한다. 왜냐하면 인터넷 익스플로러는 렌더링하기 전에 요소에 대하여 알아야 하기 때문이다.