자바스크립트에서 제공되는 각종 연산자에 대하여 살펴본다. 덧셈, 뺄셈, 곱셈, 나눗셈 같은 산술 연산이 포함된다.
하지만 컴퓨터는 산술 연산만을 수행하는 것은 아니다. 값을 비교하는 관계 연산자, 논리적인 판단을 할 수 있는 논리 연산자 등도 포함되어 있다.

		//	산술 연산자

연산자는 수학에서 사용되는 연산자와 유사하다. 즉 +, -, *, /는 각각 덧셈, 뺄셈, 곱셈, 나눗셈을 의미한다.

	연산자	설명		예		수식의 값
	
	+		덧셈		x=3+2		5
	-		뺄셈		x=3-2		1
	*		곱셈		x=3*2		6
	/		나눗셈	x=3/2		1.5
	%		나머지	x=3%2		1
	++		증가		++x			x의 값 3 -> 4
	--		감소		--x			x의 값 3 -> 2

산술 연산자를 이용한 간단한 예제를 작성하여 보자.		js_op_arith.html

증감 연산자 ++기호나 --기호를 사용하여 변수의 값을 1만큼 증가시키거나 감소시키는 연산자이다.
++x는 변수 x의 값을 1만큼 증가시킨다. --x 연산자는 변수 x의 값을 1만큼 감소시킨다.

	x 10		->		x 11
	초기상태		++x		연산이 실행된 후

증감 연산자는 피연산자의 앞이나 뒤에 올 수 있다. 만약 변수 x를 증가시킬 목적으로만 증감 연산자를 사용한다면 x++나 ++x는 동일하다.
그러나 증감 연산자를 적용한 후에 연산의 값을 사용할 목적이라면 두 가지를 구분해야 한다. ++x는 x의 값을 먼저 증가시키고 증가된 x의 값을 수식에 사용한다.
x++는 x의 이전 값을 수식에 사용한 후에 x의 값을 증가시키게 된다.
예를 들어 보자. 현재 x의 값이 10이라고 하자. 아래의 수식에서 y에는 증가된 x의 값이 대입된다. 즉 먼저 증가하고 나중에 대입한다.

	y = ++x;		// 증가된 값이 y에 대입한다. y의 값은 11이 된다.

	┌──── 2 ───	(11) ←┐ 1
	↓				(10)
	y	=	++	x

		2	1

반면에 아래의 수식에서는 현재 x의 값이 y에 대입된 후에 x의 값이 증가된다. x의 초기값은 10이라고 하면 y에는 10이 된다.

	y = x++;	// x의 이전 값이 y에 대입되고 이후에 증가된다. y의 값은 10이 된다.

	1	  (11) ─┐ 2
	┌───────┐	│
	↓	  (10)	│
	y	=	x	++
		1		2

위의 내용을 실습해 보자.		js_op_arith1.html

		//	대입 연산자

대입 연산자는 변수에 값을 할당한다. 수식 z=x+y 를 그림으로 표현하면 다음과 같다.

	┌─────────(30)
	│		┌───────┐
	│	   (10)	   (20)
	z	=	x	+	y

복합 대입 연산자란 += 처럼 대입 연산자와 산술 연산자를 합쳐 놓은 연산자이다. x += y의 의미는 x = x + y와 같다.
복합 대입 연산자는 소스를 간결하게 만들 수 있다.

다음 표는 x=10, y=5라고 가정하고 대입 연산이 어떻게 수행되는지를 설명한다.

	연산자	예			동일한 수식		결과

	+=		x += y		x = x + y		x = 15
	-=		x -= y		x = x - y		x = 5
	*=		x *= y		x = x * y		x = 50
	/=		x /= y		x = x / y		x = 2
	%=		x %= y		x = x % y		x = 0

		//	문자열에서의 + 연산자

+ 연산자는 문자열을 결합하는 용도로도 사용된다. 즉 + 연산자가 문자열에서 사용되면 문자열 결합의 의미가 된다.

	s1 = "Welcome to ";
	s2 = "Javascript";
	s3 = s1 + s2;

위의 문장을 실행하면 s3은 "Welcome to Javascript"가 된다.

그러면 숫자와 문자열을 + 연산자로 합하면 무엇이 생성되는가? 숫자와 문자열을 + 연산자로 더하면, 숫자를 문자열로 변환하여, 결합된 문자열을 반환한다.
이것을 다음과 같은 2가지 경우로 나누어서 살펴보자. x, y의 값을 출력하면 다음과 같다.

	x = 1 + 1;
	y = "Car" + 1;
	document.write(x + "<br>");		// 2가 저장된다.
	document.write(y + "<br>");		// Car1 이 저장된다.

		//	비교 연산자

비교 연산자는 논리 문장에서 값들을 비교하는 용도로 사용된다. 다음 표에서 x의 값은 1이라고 가정하자.

	연산자	설명					예		결과값

	==		값이 같으면 참		x==1	true
								x==2	false

	!=		값이 다르면 참		x!=2	true
	>		크면 참				x>2		false
	<		작으면 참			x<2		true
	>=		크거나 같으면 참		x>=2	false
	<=		작거나 같으면 참		x<=2	true

비교 연산자는 다음과 같이 조건문에서 많이 사용된다. 아직 학습하지 않았지만 다음 문장의 의미를 추리하여 보자.

	if(age > 18)	// 변수 age의 값이 18보다 크면 참이 된다.
		msg = "입장하실 수 있습니다."

js_op_compa.html

자바스크립트에서 약간 특이한 점은 === 연산자와 !== 연산자이다. === 연산자는 피연산자의 값과 타입이 모두 일치할 때만 참을 반환한다.
!== 연산자는 값이 다르거나 타입이 다르면 참이 된다. 아래 표에서 변수 x는 정수 1을 저장하고 있다고 가정하자.

	연산자			설명					예			결과값

	===		값과 타입이 모두 같으면 참		x===1		true(값도 같고 타입도 같다.)
										x==="1"		flase(값은 같으나 타입이 다르다.)

	!==		값이나 타입이 다르면 참		x!==1		false(값도 같도 타입도 다르다.)
										x!=="1"		true(값은 같으나 타입이 다르다.)

		//	논리 연산자

논리 연산자는 여러 개의 조건을 조합하여 참인지 거짓인지를 따질 때 사용한다.
예를 들어 "비가 오지 않고 휴일이면 테니스를 친다" 라는 문장에는 "비가 오지 않는다" 라는 조건과 "휴일이다" 라는 조건이 동시에 만족이 되면
테니스를 친다는 의미를 포함되어 있다.

	연산자 기호		사용 예		의미
		
	&&				x && y		AND 연산, x와 y가 모두 참이면 참, 그렇지 않으면 거짓
	||				x || y		OR 연산, x나 y 중에서 하나만 참이면 참, 모두 거짓이면 거짓
	!				x ! y		NOT 연산, x가 참이면 거짓, x가 거짓이면 참

js_op_logic.html]

논리 연산자도 조건식에서 많이 사용된다.

		//	조건 연산자

조건 연산자는 유일하게 3개의 피연산자를 가지는 삼항 연산자이다. 간단한 예를 들어 조건 연산자를 설명하여 보자.
		
참일 때	┌───────────────────────┐
	max_value	=	(x>y)	?	x	:	y;
거짓일 때└───────────────────────────────┘

위의 식에서 x가 y보다 크면 x가 수식의 결과값이 된다. 그렇지 않으면 y가 수식의 결과값이 된다. 그렇지 않다면 y가 수식의 결과값이 된다.
조건 연산자는 아주 간결하게 표현할 수 있어서 상당히 많이 애용된다. 조건 연산자를 이용한 대표적인 이용 사례를 모아 보면 다음과 같다.

하나의 예제로 나이가 30세 미만이면 변수에 "청년부"를 대입하고 그렇지 않으면 "장년부"를 대입하는 문장은 다음과 같다.

	group = (age < 30) ? "청년부" : "장년부";

		//	연산자 우선순위

연산자 우선순위는 어떤 연산자가 먼저 계산되느냐를 결정한다. 우선순위가 높은 연산자는 먼저 계산된다.
가장 흔한 예제는 다음과 같다.

	result = 3 + 4 * 5;		// 23으로 계산된다.

곱셈 연산자 *은 덧셈 연산자 + 보다 우선순위가 높기 때문에 먼저 계산된다. 아래에 전체 연산자에 대한 우선 순위표를 보였다.

	우선순위		연산자
	
	1			.[] new
	2			()
	3			++ --
	4			! ~ + - typeof void delete
	5			* / %
	6			+ -
	7			<< >>
				>>>

	8			< <= > >= in instanceof
	9			== != === !==
	10			&
	11			^
	12			|
	13			&&
	14			||
	15			?:
	16			yield
	17			= += -= *= /= %= <<= >>= >>>= &= ^= |=
	18			.