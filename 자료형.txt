자료형(data type)은 변수가 가질 수 있는 값의 종류이다. 자바스크립트에는 다음과 같은 자료형이 있다.

			┌
			│	-	수치형(number) : 정수나 실수가 될 수 있다.
기본 가료형	│	-	문자열(string) : 문자가 연결된 것을 의미한다. 텍스트라고 생각하면 된다.
이라고 한다.	│	-	부울형(boolean) : true 또는 false 값만을 가질 수 있다. 줄 중의 하나를 표현하는 데 사용된다.
			│	-	객체형(object) : 객체를 나타내는 타입이다. 차후에 학습하기로 하자.
			│	-	undefined : 값이 정해지지 않은 상태를 나타낸다.
			└

자바스크립트에서 변수를 선언할 때는 자료형이 필요 없다. 하지만 특정한 값이 변수에 저장되는 순간, 자료형은 내부적으로 결정된다.
자바스크립트에서 변수는 어떤 타입의 값이라도 가질 수 있다.

	var x;			// x의 값은 undefined가 된다.
	x = 100;		// x는 숫자를 가진다.
	x = "홍길동"		// x는 문자열을 가진다.

자바스크립트에서는 자료형을 표현하지 않지만 변수의 내부 속성으로 자료형을 가지고 있다.
js_var_type.html

현재 변수가 저장하고 있는 자료의 종류는 typeof라는 연산자를 변수에 적용하면 알 수 있다.
함수는 실제로는 객체형이지만 호출이 가능한 객체의 타입을 "function"으로 출력한다. 아래표에서 변수의 타입과 typeof 연산자가 출력하는 값을 정리하였다.

	변수의 타입				출력하는 값

	수치형(Number)			"number"
	문자열(String)			"string"
	부울형(boolean)			"boolean"
	호출이 불가능한 객체		"object"
	호출이 가능한 객체		"function"
	Null					"object"
	Undefined				"undefined"
	
		//	수치형

수치형은 정수 혹은 실수가 가능하다. 실수는 e를 사용해 지수형으로 표시할 수 있다. 즉 1,000,000과 같이 상당히 큰수는 1e6과 같이
10의 지수를 이용해 표시할 수 있다.

	var x = 123.00;		// 실수
	var y = 123;		// 정수
	var z1 = 123e3;		// 123000
	var z2 = 123e-3;	// 0.123

		//	부울형

부울형은 true(참)와 false(거짓) 값을 가진다. 부울형은 일반적으로 조건문에서 실행 조건을 검사하는 데 사용된다.

	var x = (20 > 10);		// x는 true가 된다.
	var y = (20 < 10);		// y는 false가 된다.

		//	Undefined

undefined는 값이 결정되지 않았다는 것을 나타낸다. 변수가 선언되었지만 아직 값이 대입되지 않았으면 undefined 상태가 된다.

	var person;
	document.write(person + "<br>");	// undefined가 출력

		//	문자열

문자열은 연속된 문자들로서 "abc", 또는 'abc'와 같이 나타낸다. 문자열 내의 문자는 유니코드로 표현된다.

	var s = "abc";	// s는 문장ㄹ "abc"를 저장한다.
	var s = 'abc';	// OK!
	var s = "그는 '슈퍼맨'이라고 불린다.";		// 문자열 안에 작은따옴표를 사용할 수 있다.

문자열의 길이는 내부에 들어 있는 문자의 개수이다. 문자의 위치는 0부터 시작한다. 문자열의 길이는 문자열 length 속성으로 알 수 있다.
즉 문자열 s의 길이는 다음과 같은 문장으로 알 수 있다.

	var s = "abc";		// s는 문자열 "abc"를 저장한다.
	alert(s.length);	// 3이 출력된다.

자바스크립트에서는 + 연산자를 사용하면 두개의 문자열을 합칠 수 있다.

	t = "Hello " + "World";	// 문자열 "Hello Wordl"가 된다.

그 외에도 문자열에는 많은 메서드가 준비되어 있다. 그 중에서 중요한 것만 살펴보면 다음과 같다.

	var s = "Hello World";
	s.charAt(0);			// => "H" : 첫 번째 문자
	s.replace("e", "E");	// => "HEllo World" : e를 E로 변경한다.
	s.toUpperCase();		// => "HELLo WORLD" : 대문자로 변경한다.

문자열 처리에서 주의할 점은 문자열을 변경하는 메서드는 새로운 문자열을 생성하여 반환한다는 점이다.
기존의 문자열을 수정하여 반환하는 것이 아니다. 문자열 처리를 실습하여 보자.		js_var_str.html

		//	객체형

자바스크립트에서 기본 자료형을 제외하면 모두 객체형(Object)이라고 할 수 있다. 객체를 생성하고 사용하는 것은 차후 자세하게 학습하기로 하고
여기서는 간단하게 객체를 생성하는 방법만 살펴보자. 객체(object)는 사물의 속성과 동작을 묶어서 표현하는 기법 중의 하나이다.
예를 들어 자동차는 메이커, 모델, 색상, 마력과 같은 속성도 있고 출발하기, 정지하기 등의 동작도 가지고 있다.
객체는 이것을 묶어서 다음과 같이 표현한다.

	var myCar = { modle: "bmz", color: "red", hp: 100 };

위의 객체에 동작을 나타내는 메서드를 추가하면 완전한 객체가 된다. 객체의 속성을 사용할 때는 도트(.) 연산자를 사용한다.

	document.write(myCar.model + "<br>");
	document.write(myCar.color + "<br>");
	document.write(myCar.hp + "<br>");